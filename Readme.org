[![CMake](https://github.com/TimoLassmann/tld/actions/workflows/cmake.yml/badge.svg)](https://github.com/TimoLassmann/tld/actions/workflows/cmake.yml)


[[https://github.com/TimoLassmann/tld/actions/workflows/cmake.yml][https://github.com/TimoLassmann/tld/actions/workflows/cmake.yml/badge.svg]]
* tld - a small convenience C library is small 
tld is a small C library containing a bunch of convenient function and macros developed and/or adopted by Timo Lassmann. It is under active development and therefore not recommended to be used directly in serious projects. Nevertheless, it may be useful in demonstrating some interesting C techniques. Inspiration for the library comes from many places including:
1) [[https://github.com/EddyRivasLab/easel][easel]] - a C library for biological sequence analysis developed by the [[http://eddylab.org][Eddy/Rivas laboratory]].
2) [[https://github.com/SasLuca/rayfork][rayfork]] by Sas Luca

An interesting feature is the =galloc= macro, a generic malloc wrapper. It takes a pointer and one or two numbers and allocated either an array or a matrix. For example:

#+begin_src C :eval never
double* arr = NULL;
galloc(&arr, 100)
#+end_src

is equivalent to:

#+begin_src C :eval never
double* arr = NULL;
size_t size = sizeof(double) * 100
if ((arr = malloc(size) == NULL) {                   
        fprintf(stderr,"malloc of size %d failed", size);
        exit(1);
}
memset(p, 0, size);
#+end_src

For a matrix:

#+begin_src C :eval never 
uint32_t** mat = NULL;
galloc(&mat,100,100);
#+end_src

All memory allocates with =galloc= has to be freed by =gfree= :

#+begin_src C :eval never 
gfree(arr); 
#+end_src

=galloc= support all standard data types (=int=, =float=, =double=) any types found in =stdint.h= (uint8_t etc...). 

tld also contains a simple wrapper for writing and reading [[ https://www.hdfgroup.org][hdf5]] files. For example this code writes an array to file =test.h5=

#+begin_src C :eval never 
struct hdf5_data* hdf5_data = NULL;
tld_hdf5_open_file(&hdf5_data,"test.h5");
HDF_WRITE_DATA(hdf5_data, "/","MyArrayName",arr);
tld_hdf5_close_file(&hdf5_data);
#+end_src

To read the array back:

#+begin_src C :eval never
double* arr = NULL;
struct hdf5_data* hdf5_data = NULL;
tld_hdf5_open_file(&hdf5_data,"test.h5");
RUN(HDF_READ_DATA(hdf5_data, "/","MyArrayName",&arr));
tld_hdf5_close_file(&hdf5_data);
#+end_src

* How to build

#+begin_src bash :eval never 
mkdir build
cd build
cmake ..
make
make test
#+end_src
